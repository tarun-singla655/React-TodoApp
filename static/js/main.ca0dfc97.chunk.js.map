{"version":3,"sources":["Components/Form.js","Components/Todo.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setInputText","setTodos","todos","inputText","setStatus","changeId","status","setChangeId","value","type","className","onChange","e","target","onClick","preventDefault","present","i","length","id","map","el","text","Date","completed","name","selected","stateSort","sort","a","b","getTime","state","console","log","Todo","todo","changeValueHandler","inputRef","useRef","current","outerText","key","ref","item","filter","TodoList","replaceTextHandler","App","useState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca0dfc97.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst Form = ({setInputText,setTodos,todos,inputText,setStatus,status,changeId,setChangeId})=>{\r\n \r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n  \r\n    const submitTodoHandler = (e) =>{\r\n          e.preventDefault();      \r\n          let present = false;\r\n          for(let i = 0;i<todos.length;i++)\r\n          {\r\n            if(todos[i].id === changeId)\r\n            {\r\n              present = true;  \r\n            }\r\n          }\r\n          if(present)\r\n          {\r\n            setTodos(todos.map(el => (\r\n              el.id===changeId? {...el, text:inputText}: el\r\n        )))\r\n            setChangeId(new Date());\r\n          }\r\n          else\r\n          {\r\n            setTodos([...todos,{text:inputText,completed:false,id:new Date()}]); \r\n          }\r\n        setInputText(\"\");\r\n    }\r\n    const statusHandler = (e)=>{\r\n        setStatus(e.target.value);\r\n    }\r\n    const orderHandler = (e) =>{\r\n      let stateSort = [...todos]\r\n      if(e.target.value === 'text')\r\n      {\r\n        stateSort.sort((a,b) => (a.text > b.text) ? 1 : ((b.text > a.text) ? -1 : 0))\r\n      }\r\n      else if(e.target.value === 'date'){\r\n        stateSort.sort((a,b) => (a.id.getTime() < b.id.getTime()) ? -1 : ((a.id.getTime() > b.id.getTime()) ? 1 : 0))\r\n      }\r\n\r\n      setTodos(stateSort)\r\n      setTodos((state)=>{\r\n        console.log(state);\r\n        return state;\r\n      })\r\n\r\n    }\r\n    return (\r\n      <form>\r\n      <input value = {inputText} type=\"text\" className=\"todo-input\" onChange={inputTextHandler} />\r\n      <button onClick = {submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange = {statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"select\">\r\n        <select  selected = \"date\" onChange = {orderHandler} name=\"sort\" className=\"filter-todo\">\r\n        <option value=\"date\">Recent</option>\r\n          <option value=\"text\">text</option>\r\n          {/* {/* <option value=\"completed\">Completed</option> */}\r\n          \r\n        </select>\r\n      </div>\r\n    </form>\r\n    \r\n    ); \r\n}\r\n\r\n\r\nexport default Form;","import React,{useRef} from 'react';\r\nconst Todo = ({setTodos,text,todos,todo,changeValueHandler})=>{\r\n    const inputRef = useRef(null);\r\n    const selectValueHandler = ()=>{\r\n        changeValueHandler({text:inputRef.current.outerText,key:todo.id});\r\n    }\r\n    const deleteHandler = ()=>{\r\n         setTodos(todos.filter((el)=> el.id !== todo.id ));\r\n    }\r\n    const completeHandler = () =>{\r\n        \r\n        setTodos(todos.map((item)=>{\r\n            if(item.id === todo.id){\r\n                return {...item, completed : !item.completed}\r\n            }\r\n            else{\r\n                return item;\r\n            }\r\n        }))\r\n       \r\n    }\r\n    return (\r\n        <>\r\n        <div className = \"todo\">\r\n            <li onClick={selectValueHandler} ref={inputRef} className={`todo-item ${todo.completed ? \"completed\" : \"\" }`}>{text}</li>\r\n            <button onClick = {completeHandler} className='complete-btn'><i className=\"fas fa-check\"></i></button>\r\n            <button onClick={deleteHandler} className='trash-btn'><i className=\"fas fa-trash\"></i></button>\r\n        </div>\r\n       </>\r\n    )\r\n};\r\nexport default Todo","import React from 'react';\r\nimport Todo from './Todo'\r\nconst TodoList = ({todos,setTodos,status,replaceTextHandler,setChangeId})=>{\r\n\r\n    const changeValueHandler = (value)=>{\r\n            setChangeId(value.id);\r\n            setChangeId((state)=>{\r\n                replaceTextHandler(value);\r\n                return state;\r\n            })\r\n           \r\n          \r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n            {\r\n               todos.map((todo)=> {\r\n                if ((status === 'completed' && todo.completed === true ) || (status === 'uncompleted' && todo.completed === false) || (status === 'all')  ) {\r\n                      return (\r\n                        <Todo changeValueHandler = {changeValueHandler} key = {todo.id} setTodos = {setTodos} text = {todo.text} todos = {todos} todo = {todo} />\r\n                      );\r\n                  }\r\n        \r\n                return <></>\r\n               })\r\n            }  \r\n            </ul>\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default TodoList;","import './App.css';\nimport {useState} from 'react';\nimport Form from './Components/Form';\nimport TodoList from './Components/TodoList';\n\n\nfunction App() {\n  const [inputText,setInputText] = useState(\"\");\n  const [todos,setTodos] = useState([]);\n  const [status,setStatus] = useState(\"all\");\n  const [changeId,setChangeId] = useState(new Date());\n  const replaceTextHandler = (value)=>{\n    setChangeId(value.key);\n        setInputText(value.text)\n      \n\n  }\n  return (\n    <div className=\"App\">\n      <header>\n      <h1>Tarun Todo App</h1>\n      </header>\n      <Form  status = {status} changeId = {changeId} setChangeId = {setChangeId}  todos = {todos} inputText = {inputText} setTodos = {setTodos} setInputText = {setInputText} setStatus = {setStatus} />\n      <TodoList  setChangeId = {setChangeId} replaceTextHandler = {replaceTextHandler} status = {status} setTodos = {setTodos} todos = {todos} />\n    </div>\n  );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}